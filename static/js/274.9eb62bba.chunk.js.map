{"version":3,"file":"static/js/274.9eb62bba.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactElement/ContactElement.module.css?8e20","components/ContactElement/ContactElement.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/Contacts/Contact.module.css?a0ec","pages/Contacts/Contact.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const getFilter = state => state.filter;\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"span\":\"ContactForm_span__w4N46\",\"input\":\"ContactForm_input__Bl93P\",\"button__submit\":\"ContactForm_button__submit__nnapz\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact} from '../../redux/users/usersOperations';\nimport { getContacts } from '../../redux/selectors';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleNewContact = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const reset = {\n      id: nanoid(),\n      name,\n      phone: number,\n    };\n    const ContactInList = contactName => {\n      return contacts.find(contact => contact.name === contactName);\n    };\n\n    if (ContactInList(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    };\n\n   dispatch(addContact(reset));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        <span className={css.span}>Name</span>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleNewContact}\n        />\n      </label>\n\n      <label className={css.label}>\n        <span className={css.span}>Number</span>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleNewContact}\n        />\n      </label>\n      <button className={css.button__submit} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\",\"filter__span\":\"Filter_filter__span__TndoE\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport { filterList } from '../../redux/filter/filterSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={css.filter__label}>\n      <span className={css.filter__span}>Find contacts by name</span>\n      <input\n        className={css.filter__input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(filterList(event.currentTarget.value))}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"li\":\"ContactElement_li__jKseC\",\"contact\":\"ContactElement_contact__7EE1A\",\"button__delete\":\"ContactElement_button__delete__hL-L-\"};","import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport * as usersOperations from '../../redux/users/usersOperations';\n\nimport css from './ContactElement.module.css';\n\nexport default function ContactElement({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.li}>\n      <p className={css.contact}>\n        {name} : {number}\n      </p>\n      <button\n        className={css.button__delete}\n        type=\"button\"\n        onClick={() => dispatch(usersOperations.deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactElement.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactList_contact__0STHS\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from '../../redux/selectors';\nimport * as usersOperations from '../../redux/users/usersOperations';\nimport ContactElement from '../ContactElement/ContactElement';\nimport css from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(usersOperations.fetchContacts());\n    }, [dispatch])\n  \n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <ul className={css.contact}>\n      {filteredContacts.map(({ id, name, phone }) => (\n        <ContactElement key={id} id={id} name={name} number={phone} />\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__page\":\"Contact_contact__page__gRzE+\",\"contact__title\":\"Contact_contact__title__vdUQp\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { getIsLoading } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport css from './Contact.module.css';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(getIsLoading);\n\n  return (\n    <div className={css.contact__page}>\n      <h2 className={css.contact__title}>Phonebook</h2>\n      <ContactForm />\n      <h3 className={css.contact__title}>Contacts</h3>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getFilter","state","filter","getContacts","contacts","items","getIsLoading","isLoading","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleNewContact","event","currentTarget","value","className","css","onSubmit","preventDefault","contactName","reset","phone","find","contact","alert","addContact","type","pattern","title","required","onChange","filterList","ContactElement","onClick","usersOperations","ContactList","useEffect","filteredContacts","toLowerCase","includes","map","Loader"],"sourceRoot":""}