{"version":3,"file":"static/js/425.c0f3b94d.chunk.js","mappings":"8SACA,EAA8B,+BAA9B,EAA2E,+BAA3E,EAAyH,gCAAzH,EAAwK,gCAAxK,EAAuN,gCAAvN,EAAuQ,iC,SCMjQA,EAAe,CACnBC,MAAO,GACPC,SAAU,IA0EZ,EAvEkB,WAEhB,OAA4BC,EAAAA,EAAAA,UAASH,GAArC,eAAOI,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAErBC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KACfV,GAAU,SAAAW,GAAI,yBAAUA,GAAV,cAAiBD,EAAOD,GAAxB,GACf,EAEKG,EAAY,mCAAG,WAAML,GAAN,wEACnBA,EAAMM,iBADa,kBAMXZ,GAASa,EAAAA,EAAAA,GAAef,IAASgB,SANtB,OAOjBC,EAAAA,GAAAA,QAAc,YAPG,gDASjBC,QAAQC,IAAR,MACAF,EAAAA,GAAAA,MAAY,cAVK,QAanBhB,EAAUL,GAbS,yDAAH,sDAgBlB,OACE,iBAAKwB,UAAWC,EAAhB,UACc,YAAXjB,IAAwB,SAACkB,EAAA,EAAD,KAEzB,kBAAMF,UAAWC,EAAiBE,SAAUV,EAA5C,WACE,eAAIO,UAAWC,EAAf,2CACA,mBAAOD,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXV,KAAK,QACLa,KAAK,QACLC,UAAQ,EACRC,aAAa,KACbC,YAAY,iBACZjB,MAAOV,EAAOH,MACd+B,SAAUrB,QAId,mBAAOa,UAAWC,EAAlB,sBAEE,kBACED,UAAWC,EAEXG,KAAK,WACLb,KAAK,WACLc,UAAQ,EACRC,aAAa,MACbC,YAAY,gBACZjB,MAAOV,EAAOF,SACd8B,SAAUrB,QAId,mBAAQa,UAAWC,EAAmBG,KAAK,SAA3C,yBAMP,C","sources":["webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login__page\":\"LoginPage_login__page__J3ZOD\",\"login__form\":\"LoginPage_login__form__QUIbO\",\"login__title\":\"LoginPage_login__title__ngRub\",\"login__label\":\"LoginPage_login__label__3MOpf\",\"login__input\":\"LoginPage_login__input__eJZ5k\",\"login__button\":\"LoginPage_login__button__TT4BI\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authLoginThunk } from 'redux/auth/auth.thunks';\nimport { selectAuthStatus } from 'redux/auth/auth.selectors';\nimport { toast } from 'react-toastify';\nimport {Loader} from 'components/Loader/Loader';\nimport css from './LoginPage.module.css';\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst LoginPage = () => {\n \n  const [values, setValues] = useState(initialState);\n\n  const dispatch = useDispatch();\n  const status = useSelector(selectAuthStatus);\n\n  const handleChange = event => {\n    const { value, name } = event.target;\n    setValues(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n   \n\n    try {\n      await dispatch(authLoginThunk(values)).unwrap();\n      toast.success('Success!');\n    } catch (error) {\n      console.log(error);\n      toast.error('Some error');\n    }\n\n    setValues(initialState);\n  };\n\n  return (\n    <div className={css.login__page}>\n      {status === 'loading' && <Loader />}\n\n      <form className={css.login__form} onSubmit={handleSubmit}>\n        <h2 className={css.login__title}>Please Log in Your Phonebook</h2>\n        <label className={css.login__label}>\n          Email\n          <input\n            className={css.login__input}\n            name=\"email\"\n            type=\"email\"\n            required\n            autoComplete=\"on\"\n            placeholder=\"name@email.com\"\n            value={values.email}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label className={css.login__label}>\n          Password\n          <input\n            className={css.login__input}\n            // type={isPassword ? \"password\" : \"text\"}\n            type=\"password\"\n            name=\"password\"\n            required\n            autoComplete=\"off\"\n            placeholder=\"your password\"\n            value={values.password}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button className={css.login__button} type=\"submit\">\n          Log in\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginPage;"],"names":["initialState","email","password","useState","values","setValues","dispatch","useDispatch","status","useSelector","selectAuthStatus","handleChange","event","target","value","name","prev","handleSubmit","preventDefault","authLoginThunk","unwrap","toast","console","log","className","css","Loader","onSubmit","type","required","autoComplete","placeholder","onChange"],"sourceRoot":""}